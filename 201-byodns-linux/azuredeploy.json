{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            },
            "defaultValue": "localadmin"
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Virtual Machine."
            }
        },
        "ubuntuOSVersion": {
            "type": "string",
            "defaultValue": "15.10",
            "allowedValues": [
                "14.04.2-LTS",
                "14.04.3-LTS",
                "15.10"
            ],
            "metadata": {
                "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values:14.04.2-LTS, 14.04.3-LTS, 15.10."
            }
        },   
        "adAssetLocation": {
			"type": "string",
			"metadata": {
				"description": "The location of resources that the script is dependent on such as linked templates and DSC modules"
			},
			"defaultValue": "https://raw.githubusercontent.com/Azure/AzureStack-QuickStart-Templates/master/ad-non-ha"
		},
    },
    "variables": {
        "dnsNameForPublicIP": "[concat('dns', resourceGroup().name)]",
        "dnsserver": "192.168.100.2",
        "location": "[resourceGroup().location]",
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "OSDiskName": "osdisk",
        "nicName": "myVnic",
        "addressPrefix": "10.0.0.0/24",
        "subnetName": "mySubnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageAccountName": "[concat('sa', resourceGroup().name)]",
        "storageAccountType": "Standard_LRS",
        "storageDomain": "azurestack.local",
        "publicIPAddressName": "myPublicIP",
        "publicIPAddressType": "Dynamic",
        "vmStorageAccountContainerName": "vhds",
        "vmName": "[concat('vm', resourceGroup().name)]",
        "vmSize": "Standard_A1",
        "virtualNetworkName": "myVnet",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "assetLocation": "https://raw.githubusercontent.com/Azure/AzureStack-QuickStart-Templates/master/201-complex-linux-vm",
        "scriptFileName": "docker.sh",
        "scriptFile": "[concat(variables('assetLocation'),'/',variables('scriptFileName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "networkSecurityGroupName": "mySG",
        "apiVersion": {
            "resources": { "deployments": "2015-01-01" },
            "network": "2015-05-01-preview",
            "storage": "2015-05-01-preview",
            "compute": "2015-06-15"
        },
        "staticSubnetName": "ADStaticSubnet",
        "staticSubnetID": "[concat(variables('vnetID'),'/subnets/',variables('staticSubnetName'))]",
        "primaryAdIpAddress": "10.0.0.4",
        "adTemplateURL": "[concat(parameters('adAssetLocation'),'/adVmTemplate.json')]",
		"adStorageName": "[concat('adsa', resourceGroup().name)]",
        "adVmDepoyment": "DeployAdVms",
        "adVmName": "[concat(resourcegroup().name,'-AD')]",
        "adPDCVMName": "[concat(variables('adVmName'),'0')]",
        "adVMSize":  "Standard_A1",
        "publicLBName": "ADPublicLoadBalancer",
        "publicIPAddressName": "lbPublicIP",        
        "publicIPAddressNameID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",       
		"lbFE": "ADLBFE",
		"lbBE": "ADLBBE",
		"rpdNAT": "ADRDPNAT",
		"publiclbID": "[resourceId('Microsoft.Network/loadBalancers',variables('publicLBName'))]",
		"publiclbFEConfigID": "[concat(variables('publiclbID'),'/frontendIPConfigurations/',variables('lbFE'))]",
		"rdpPort": 3389,
		"publicBEAddressPoolID": "[concat(variables('publiclbID'),'/backendAddressPools/',variables('lbBE'))]",
		"adRDPNATRuleID": "[concat(variables('publiclbID'),'/inboundNatRules/',variables('rpdNAT'))]"
    },
    "resources": [
        {
            "apiVersion": "[variables('apiVersion').network]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[variables('location')]",
            "tags": {
                "displayName": "NetworkSecurityGroup"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "rule1",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageAccountName'))]",
            "apiVersion": "[variables('apiVersion').storage]",
            "location": "[variables('location')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "apiVersion": "[variables('apiVersion').network]",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "name": "[variables('publiclbName')]",
            "type": "Microsoft.Network/loadBalancers",
            "location": "[variables('location')]",
            "dependsOn": [
                "[variables('publicIPAddressNameID')]"
            ],
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "[variables('lbFE')]",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('publicIPAddressNameID')]"
                            }
                        }
                    }
                ],
                "inboundNatRules": [
                    {
                        "name": "[variables('rpdNAT')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('publiclbFEConfigID')]"
                            },
                            "protocol": "tcp",
                            "frontendPort": "[variables('rdpPort')]",
                            "backendPort": 3389,
                            "enableFloatingIP": false
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersion').network]",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                            }
                        }
                    }
                ],
                "dhcpOptions": {
                    "dnsServers": [ "[variables('dnsserver')]" ]
                }
            }
        },
        {
            "apiVersion": "[variables('apiVersion').network]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "dnsSettings": {
                    "dnsServers": [ "[variables('dnsserver')]" ]
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "[variables('apiVersion').compute]",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[parameters('ubuntuOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "name": "[variables('adVmDepoyment')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "[variables('publiclBID')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('adTemplateURL')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "adminUsername": { "value": "[parameters('adminUsername')]" },
                    "adminPassword": { "value": "[parameters('adminPassword')]" },
                    "adRDPNATRuleID": { "value": "[variables('adRDPNATRuleID')]" },
                    "storageAccount": { "value": "[variables('adStorageName')]" },
                    "subnetResourceId": { "value": "[variables('staticSubnetID')]" },
                    "primaryAdIpAddress": { "value": "[variables('primaryAdIpAddress')]" },
                    "storageAccountType": { "value": "[variables('storageAccountType')]" },
                    "vmNamePrefix": { "value": "[variables('adVmName')]" },
                    "vmSize": { "value": "[variables('adVMSize')]" }
                }
            }
        },
        ,
        {
            "name": "[variables('deployPrimaryAd')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2015-01-01",
            "dependsOn": [
                "[variables('adVmDeploymentID')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('deployPrimaryAdTemplateURL')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "primaryADName": {
                        "value": "[variables('adVMName')]"
                    },
                    "domainName": {
                        "value": "[parameters('domainName')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "assetLocation": {
                        "value": "[variables('adAssetLocation')]"
                    }
                }
            }
        },
    ]
}